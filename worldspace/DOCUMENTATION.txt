
Worldspace Project
	by radj307

///  FILE INHERITANCE  ///

		  "Coord.h"  "settings.h"
		 	  v	       	  v
	   {-------------------------}
		v	      v		    	v
	"actor.h"  "cell.h"  	"Flare.h"
		v	      v				v
	 "item.h"	  |				|
		v		  v				v
		{---------------}		|  
					   v		v
  "GameState.h"  "GameRules.h"	|	   
		v			   v		v
	    {-----------------------}
				   v
			 "Gamespace.h"
				   v
			"FrameBuffer.h"
				   v
		   "game_threads.hpp"
				   v
			   "main.cpp"



///  CLASSES AND CONCEPTS  ///

	Below is a detailed content list of the files found in the file inheritance section, divided by file group.

	///  FORMATTING  ///
	/*...*/		- Represents a group of files with a similar purpose. (concept)
	"..."		- Represents a file.
	<...>		- Represents a class or struct.
	[...]		- Represents a namespace.
	...()		- Represents a function. (Only included if global, or namespace member)
	enum ...	- Represents an enumerator.

	/*| UTILITIES & DEFAULTS |*/
	{
		"settings.h"
			->  <GLOBAL>					// Global commandline settings & their defaults, as well as world generation defaults.

		"Coord.h"
			->  <Coord>						// Wrapper for a x/y coordinate
				->  <checkDistance>			// Functor to find the distance between 2 Coord points
				->	<checkDistanceFrom>		// Same as above, but contains a pointer to a Coord instance. 
				->  <checkBounds>			// Functor to check if a given Coord is within a square boundary.
			->  [sys]
				->  <cursorPos>				// Overload sys::cursorPos() to allow Coord as a parameter.
	}
	/*| GAME ELEMENTS |*/
	{
		"cell.h"
			->  <Tile>						// A single location in the game world, contains attributes that control actor interactions.
				->  enum display			// A list of valid tile display characters, which also act as a type identifier.
			->  <Cell>						// The world space, composed of a matrix of tiles.
			
		"actor.h"
			->  <ActorMaxStats>				// Contains an actor's maximum possible stats.
				->  <ActorStats>			// Contains an actor's current stats.
					->  <ActorTemplate>		// Contains basic stats & values to make randomly generating actors easier.
					->  <ActorBase>			// Contains all universal actor stats, functions, and utilities
						->  <Player>		// A human player instance, with an attached <checkDistanceFrom> functor.
						->  <NPC>			// Contains all NPC-specific stats, functions, etc.
							->  <Enemy>		// A basic enemy NPC
							->  <Neutral>	// A basic neutral NPC
							
		"item.h"
			->  <ItemStats>					// Contains an item's basic stats, and setter/getter functions
				->  <ItemStaticBase>		// Contains all functions related to static items that appear in the world.
					->  <ItemStaticHealth>	// Static health potions to be placed randomly around the map
					->  <ItemStaticStamina>	// Static stamina potions to be placed randomly around the map
		
		"Flare.h"
			->  <Flare>						// Contains all relevant data for flashing the console display with colored patterns
				->  <FlareLevel>			// Diagonal green-background color flare to indicate player level-ups
				->  <FlareChallenge>		// Edge red-background color flare to indicate the finale event
	}
	/*| Game Rules & Settings |*/
	{
		"GameRules.h"
			->  <GameRules>					// Contains all configuration options for changing game balance, difficulty, etc. 
	}
	/*| GAME FUNCTIONS & OPERATION |*/
	{	
		"GameState.h"
			->  <GameState>					// Contains all game outcome information 
			
		"Gamespace.h"
			->  <Gamespace>					// Contains all game elements & game functions, as well as implementation of actor AI.
	}
	/*| CONSOLE DISPLAY |*/
	{
		"FrameBuffer.h"
			->  <Frame>						// Contains a single frame, and the character matrix used to display it.
				->  <FrameBuffer>			// Contains the frame display function, and the player stats bar. Used to avoid cls
	}
	/*| MULTI-THREADING & TASK DELEGATION |*/
	{
		"game_threads.hpp"
			->  [game]						// Namespace containing all high-level game functions & threads.
				->  start()					// Starts the game threads and returns once they are done.
				->  [_internal]				// Namespace containing all thread functions, the mutex, and shared memory.
					->  print_game_over()	// Gets the outcome of the game and prints "game over" / "you win" / "you lose"
					->  thread_player()		// Asyncronous thread for getting player input, and performing player actions.
					->  thread_npc()		// Asyncronous thread for performing NPC actions.
					->  thread_display()	// Asyncronous thread for displaying the FrameBuffer to the console.
	}
	/*| MAIN |*/
	{
		"main.cpp"
			->  interpret()					// Interprets commandline arguments from main() and constructs a <GLOBAL> instance.
			->  prompt_restart()			// Prompts the player to press 'r' to restart, or 'q' to quit
			->  main()						// Calls interpret(), game::start(), and prompt_restart().
	}